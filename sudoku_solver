print("В этом проекте я реализую программу, которая решает головоломку Судоку")

def find_next_empty(puzzle): # в этой функции мы находим свободные клетки в пазле
    for r in range(9):
        for c in range(9): # цикл row отвечает за строку, цикл c отвечает за столбец
            if puzzle[r][c] == -1: # если найденная клетка равна -1, мы нашли свободную клетку
                return r, c # возвращаем строку и столбец свободной клетки
    return None, None # иначе вернем вердикт, что все клетки в пазле заняты

def is_valid(guess_val, puzzle, row, col): # проверка на корректность нашей комбинации в пазле
    row_val = puzzle[row]
    if guess_val in row_val: # если предполагаемое значение уже есть в строке, значит оно не подходит
        return False
    col_val = [puzzle[i][col] for i in range(9)] # список существующих значений в столбце
    if guess_val in col_val: # если предполагаемое значение уже есть в столбце, значит оно не подходит
        return False
    row_start = (row // 3) * 3 # с какой итерации мы начинаем искать значение в строке
    col_start = (col // 3) * 3 # c какой итерации мы начинаем искать значение в столбце
    for r in range(row_start, row_start + 3):
        for c in range(col_start, col_start + 3):
            if guess_val == puzzle[r][c]: # если мы нашли предполагаемое значение в клетке, оно нам не подходит
                return False
    return True # иначе мы не нашли наше значение в клетках, значит оно нам подходит

def sudoku_solver(puzzle): # решает головоломку Судоку
    row, col = find_next_empty(puzzle) # проверяем строку и столбец на наличие цифры -1
    if row is None: # если в строке не осталось свободной клетки, мы можем переходить к следующей строке
        return True
    for guess_val in range(1, 10): # наше предполагаемое значение в диапозоне от 1 до 10
        if is_valid(guess_val, puzzle, row, col): # если есть свободная клетка, помещаем в ней наше значение
            puzzle[row][col] = guess_val
        puzzle[row][col] = -1 # иначе мы оставляем нашу клетку неизменной
    return False
board = [
        [3, 9, -1,  -1, 5, -1,  -1, -1, -1],
        [-1, -1, -1,  2, -1, -1,  -1, -1, 5],
        [-1, -1, -1,   7, 1, 9,  -1, 8, 1],

        [-1, 5, -1,  -1, 6, 8,  -1, -1, -1],
        [2, -1, 6,  -1, -1, 3,  -1, -1, -1],
        [-1, -1, -1,  -1, -1, 4,  -1, -1, -1],

        [5, 1, -1,  -1, -1, -1,  -1, -1, -1],
        [6, 7, -1,  1, -1, 5,  -1, 4, -1],
        [1, -1, 9,  -1, -1, -1,  2, -1, -1]
    ]
print(sudoku_solver(board))
print(board)
